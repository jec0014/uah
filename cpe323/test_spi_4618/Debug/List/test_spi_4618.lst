###############################################################################
#
# IAR C/C++ Compiler V6.10.2.50871/W32 for MSP430         04/Nov/2014  12:45:32
# Copyright 1996-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.10
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  D:\uah\cpe323\test_spi_4618\test_spi_4618.c
#    Command line  =  
#        D:\uah\cpe323\test_spi_4618\test_spi_4618.c -lCN
#        D:\uah\cpe323\test_spi_4618\Debug\List\ -o
#        D:\uah\cpe323\test_spi_4618\Debug\Obj\ --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --debug -D__MSP430FG4618__ -e
#        --double=32 --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\430\lib\dlib\dl430xlsfn.h" --core=430X
#        --data_model=small -On --multiplier=16 --segment __data16=DATA16
#        --segment __data20=DATA20 --code_model=large
#    List file     =  D:\uah\cpe323\test_spi_4618\Debug\List\test_spi_4618.lst
#    Object file   =  D:\uah\cpe323\test_spi_4618\Debug\Obj\test_spi_4618.r43
#
###############################################################################

D:\uah\cpe323\test_spi_4618\test_spi_4618.c
      1          /***********************************************************************
      2           * Title: Test - SPI for MSP4618
      3           * Date Due: NEVA!
      4           * 
      5           * Description:
      6           *
      7           * By: Christopher 'ctag' Bero <csb0019@uah.edu>
      8           * Project: https://github.com/ctag/uah
      9           *
     10           * This software is licensed under the GPLv3,
     11           * consult the LICENSE file for more information.
     12           **********************************************************************/
     13          
     14          #include <msp430.h> // The *correct* include statement

   \                                 In  segment DATA16_AN, at 0x0
   \   unsigned char volatile IE1
   \                     IE1:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x3
   \   unsigned char volatile IFG2
   \                     IFG2:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x18
   \   unsigned char const volatile P3IN
   \                     P3IN:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x1b
   \   unsigned char volatile P3SEL
   \                     P3SEL:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x68
   \   unsigned char volatile UCB0CTL0
   \                     UCB0CTL0:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x69
   \   unsigned char volatile UCB0CTL1
   \                     UCB0CTL1:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x6a
   \   unsigned char volatile UCB0BR0
   \                     UCB0BR0:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x6b
   \   unsigned char volatile UCB0BR1
   \                     UCB0BR1:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x6e
   \   unsigned char const volatile UCB0RXBUF
   \                     UCB0RXBUF:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x6f
   \   unsigned char volatile UCB0TXBUF
   \                     UCB0TXBUF:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x120
   \   unsigned short volatile WDTCTL
   \                     WDTCTL:
   \   000000                DS8 2
     15          
     16          // Set MOSI definitions
     17          #define LED_ON_STATE    0x31	// character '1'
     18          #define LED_OFF_STATE   0x30    // character '0'
     19          #define LED_NUL_STATE   0x00    // character NULL - used for dummy write operation
     20          
     21          // Set MISO definitions
     22          #define LED_ON          0x01
     23          #define LED_OFF         0x00
     24          

   \                                 In  segment CODE, align 2
     25          void SPISetup(void)
   \                     SPISetup:
     26          {
     27            UCB0CTL0 = UCMSB + UCMST + UCSYNC; 	// sync. mode, 3-pin SPI, Master mode, 8-bit data
   \   000000   F24029006800 MOV.B   #0x29, &0x68
     28            UCB0CTL1 = UCSSEL_2 + UCSWRST;   	// SMCLK and Software reset                  
   \   000006   F24081006900 MOV.B   #0x81, &0x69
     29            UCB0BR0 = 0x02; 			// Data rate = SMCLK/2 ~= 500kHz                          
   \   00000C   E2436A00     MOV.B   #0x2, &0x6a
     30            UCB0BR1 = 0x00;
   \   000010   C2436B00     MOV.B   #0x0, &0x6b
     31            P3SEL |= BIT1 + BIT2 + BIT3;		// P3.1,P3.2,P3.3 option select               
   \   000014   F2D00E001B00 BIS.B   #0xe, &0x1b
     32            UCB0CTL1 &= ~UCSWRST; 		// **Initialize USCI state machine**
   \   00001A   D2C36900     BIC.B   #0x1, &0x69
     33          }
   \   00001E   1001         RETA
   \   000020                REQUIRE UCB0CTL0
   \   000020                REQUIRE UCB0CTL1
   \   000020                REQUIRE UCB0BR0
   \   000020                REQUIRE UCB0BR1
   \   000020                REQUIRE P3SEL
     34          

   \                                 In  segment CODE, align 2
     35          unsigned char SPIGetState(void)
   \                     SPIGetState:
   \                     ??SPIGetState_0:
     36          {
     37              while((P3IN & 0x01));             // Verifies busy flag
   \   000000   D2B31800     BIT.B   #0x1, &0x18
   \   000004   FD2F         JC      ??SPIGetState_0
     38              IFG2 &= ~UCB0RXIFG;    
   \   000006   E2C20300     BIC.B   #0x4, &0x3
     39              UCB0TXBUF = LED_NUL_STATE;        // Dummy write to start SPI
   \   00000A   C2436F00     MOV.B   #0x0, &0x6f
     40              while (!(IFG2 & UCB0RXIFG));      // USCI_B0 TX buffer ready?
   \                     ??SPIGetState_1:
   \   00000E   E2B20300     BIT.B   #0x4, &0x3
   \   000012   FD2B         JNC     ??SPIGetState_1
     41              return UCB0RXBUF;                  
   \   000014   5C426E00     MOV.B   &0x6e, R12
   \   000018   1001         RETA
   \   00001A                REQUIRE P3IN
   \   00001A                REQUIRE IFG2
   \   00001A                REQUIRE UCB0TXBUF
   \   00001A                REQUIRE UCB0RXBUF
     42          }
     43          

   \                                 In  segment CODE, align 2
     44          void SPISetState(unsigned char State)
   \                     SPISetState:
   \                     ??SPISetState_0:
     45          {
     46             while(P3IN & 0x01);                // Verifies busy flag
   \   000000   D2B31800     BIT.B   #0x1, &0x18
   \   000004   FD2F         JC      ??SPISetState_0
     47             IFG2 &= ~UCB0RXIFG;  
   \   000006   E2C20300     BIC.B   #0x4, &0x3
     48             UCB0TXBUF = State;                 //  write new state
   \   00000A   C24C6F00     MOV.B   R12, &0x6f
     49             while (!(IFG2 & UCB0RXIFG));       // USCI_B0 TX buffer ready?
   \                     ??SPISetState_1:
   \   00000E   E2B20300     BIT.B   #0x4, &0x3
   \   000012   FD2B         JNC     ??SPISetState_1
     50          }
   \   000014   1001         RETA
   \   000016                REQUIRE P3IN
   \   000016                REQUIRE IFG2
   \   000016                REQUIRE UCB0TXBUF
     51          
     52          

   \                                 In  segment CODE, align 2
     53          void main(void)
   \                     main:
     54          {
     55          	WDTCTL = (WDTPW|WDTHOLD);
   \   000000   B240805A2001 MOV.W   #0x5a80, &0x120
     56          	
     57          	SPISetup();
   \   000006   ........     CALLA   #SPISetup
     58          	
     59          	_EINT();	// Enable interrupts
   \   00000A   32D2         EINT
     60          	
     61          	IE1 |= WDTIE;                     // Enable WDT interrupt
   \   00000C   D2D30000     BIS.B   #0x1, &0x0
     62          	//_BIS_SR(LPM0_bits + GIE);         // Enter LPM0 w/ interrupt
     63          	
     64          	WDTCTL = WDT_ADLY_1000;
   \   000010   B2401C5A2001 MOV.W   #0x5a1c, &0x120
     65          	
     66          	while (1)
     67          	{
     68          		asm("NOP");
   \                     ??main_0:
   \   000016   0343         NOP
   \   000018   FE3F         JMP     ??main_0
   \   00001A                REQUIRE WDTCTL
   \   00001A                REQUIRE IE1
     69          	}
     70          }
     71          
     72          /*
     73           * Watchdog Timer interrupt service routine
     74           */
     75          #pragma vector = WDT_VECTOR

   \                                 In  segment ISR_CODE, align 2
     76          __interrupt void watchdog_timer(void)
   \                     watchdog_timer:
     77          {
   \   000000   5F15         PUSHM.W #0x6, R15
     78          	char currentState = SPIGetState();
   \   000002   ........     CALLA   #SPIGetState
   \   000006   4A4C         MOV.B   R12, R10
     79          	if (currentState == '0')
   \   000008   7A903000     CMP.B   #0x30, R10
   \   00000C   0520         JNE     ??watchdog_timer_0
     80          	{
     81          		SPISetState(LED_ON_STATE);
   \   00000E   7C403100     MOV.B   #0x31, R12
   \   000012   ........     CALLA   #SPISetState
   \   000016   043C         JMP     ??watchdog_timer_1
     82          	} else {
     83          		SPISetState(LED_OFF_STATE);
   \                     ??watchdog_timer_0:
   \   000018   7C403000     MOV.B   #0x30, R12
   \   00001C   ........     CALLA   #SPISetState
     84          	}
     85          }
   \                     ??watchdog_timer_1:
   \   000020   5A17         POPM.W  #0x6, R15
   \   000022   0013         RETI

   \                                 In  segment INTVEC, offset 0x34, root
   \                     `??watchdog_timer??INTVEC 52`:
   \   000034   ....         DC16    watchdog_timer
     86          
     87          
     88          
     89          
     90          
     91          
     92          
     93          
     94          
     95          
     96          
     97          
     98          
     99          
    100          
    101          
    102          
    103          
    104          
    105          
    106          
    107          
    108          
    109          
    110          
    111          
    112          
    113          
    114          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   SPIGetState
      4   SPISetState
      4   SPISetup
      4   main
        4   -> SPISetup
     16   watchdog_timer
       16   -> SPIGetState
       16   -> SPISetState


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ??watchdog_timer??INTVEC 52
       1  IE1
       1  IFG2
       1  P3IN
       1  P3SEL
      26  SPIGetState
      22  SPISetState
      32  SPISetup
       1  UCB0BR0
       1  UCB0BR1
       1  UCB0CTL0
       1  UCB0CTL1
       1  UCB0RXBUF
       1  UCB0TXBUF
       2  WDTCTL
      26  main
      36  watchdog_timer

 
 106 bytes in segment CODE
  12 bytes in segment DATA16_AN
   2 bytes in segment INTVEC
  36 bytes in segment ISR_CODE
 
 142 bytes of CODE  memory
   0 bytes of CONST memory (+  2 bytes shared)
   0 bytes of DATA  memory (+ 12 bytes shared)

Errors: none
Warnings: none
