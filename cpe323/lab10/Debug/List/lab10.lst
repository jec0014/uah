###############################################################################
#
# IAR C/C++ Compiler V6.10.2.50871/W32 for MSP430         06/Nov/2014  15:23:15
# Copyright 1996-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.10
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  D:\uah\cpe323\lab10\lab10.c
#    Command line  =  
#        D:\uah\cpe323\lab10\lab10.c -lCN D:\uah\cpe323\lab10\Debug\List\ -o
#        D:\uah\cpe323\lab10\Debug\Obj\ --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --debug -D__MSP430FG4618__ -e --double=32
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\430\lib\dlib\dl430xlsfn.h" --core=430X --data_model=small -On
#        --multiplier=16 --segment __data16=DATA16 --segment __data20=DATA20
#        --code_model=large
#    List file     =  D:\uah\cpe323\lab10\Debug\List\lab10.lst
#    Object file   =  D:\uah\cpe323\lab10\Debug\Obj\lab10.r43
#
###############################################################################

D:\uah\cpe323\lab10\lab10.c
      1          /***********************************************************************
      2           * Title:
      3           * Date Due:
      4           * 
      5           * Description:
      6           *
      7           * By: Christopher 'ctag' Bero <csb0019@uah.edu>
      8           * Project: https://github.com/ctag/uah
      9           *
     10           * This software is licensed under the GPLv3,
     11           * consult the LICENSE file for more information.
     12           **********************************************************************/
     13          
     14          #include <msp430.h> // The *correct* include statement

   \                                 In  segment DATA16_AN, at 0x3
   \   unsigned char volatile IFG2
   \                     IFG2:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x1a0
   \   unsigned short volatile ADC12CTL0
   \                     ADC12CTL0:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x1a2
   \   unsigned short volatile ADC12CTL1
   \                     ADC12CTL1:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x1a6
   \   unsigned short volatile ADC12IE
   \                     ADC12IE:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x140
   \   unsigned short volatile ADC12MEM0
   \                     ADC12MEM0:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x142
   \   unsigned short volatile ADC12MEM1
   \                     ADC12MEM1:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x144
   \   unsigned short volatile ADC12MEM2
   \                     ADC12MEM2:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x80
   \   unsigned char volatile ADC12MCTL0
   \                     ADC12MCTL0:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x81
   \   unsigned char volatile ADC12MCTL1
   \                     ADC12MCTL1:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x82
   \   unsigned char volatile ADC12MCTL2
   \                     ADC12MCTL2:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x2e
   \   unsigned char volatile P2SEL
   \                     P2SEL:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x36
   \   unsigned char volatile P6DIR
   \                     P6DIR:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x37
   \   unsigned char volatile P6SEL
   \                     P6SEL:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x160
   \   unsigned short volatile TACTL
   \                     TACTL:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x162
   \   unsigned short volatile TACCTL0
   \                     TACCTL0:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x172
   \   unsigned short volatile TACCR0
   \                     TACCR0:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x60
   \   unsigned char volatile UCA0CTL0
   \                     UCA0CTL0:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x61
   \   unsigned char volatile UCA0CTL1
   \                     UCA0CTL1:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x62
   \   unsigned char volatile UCA0BR0
   \                     UCA0BR0:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x63
   \   unsigned char volatile UCA0BR1
   \                     UCA0BR1:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x64
   \   unsigned char volatile UCA0MCTL
   \                     UCA0MCTL:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x67
   \   unsigned char volatile UCA0TXBUF
   \                     UCA0TXBUF:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x120
   \   unsigned short volatile WDTCTL
   \                     WDTCTL:
   \   000000                DS8 2
     15          
     16          void turn_off();
     17          void sendData();
     18          void UART_putchar(char);
     19          void initializeUART();
     20          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     21          volatile long int ADCXval, ADCYval, ADCZval;
   \                     ADCXval:
   \   000000                DS8 4

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     ADCYval:
   \   000000                DS8 4

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     ADCZval:
   \   000000                DS8 4

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     22          volatile float Xper, Yper, Zper;
   \                     Xper:
   \   000000                DS8 4

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     Yper:
   \   000000                DS8 4

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
   \                     Zper:
   \   000000                DS8 4
     23          

   \                                 In  segment CODE, align 2
     24          void UART_putchar(char c)
   \                     UART_putchar:
   \                     ??UART_putchar_0:
     25          {
     26              while(!(IFG2 & UCA0TXIFG)); //Wait for previous character to be sent
   \   000000   E2B30300     BIT.B   #0x2, &0x3
   \   000004   FD2B         JNC     ??UART_putchar_0
     27              UCA0TXBUF = c;              //Send byte to the buffer for transmitting
   \   000006   C24C6700     MOV.B   R12, &0x67
     28          }
   \   00000A   1001         RETA
   \   00000C                REQUIRE IFG2
   \   00000C                REQUIRE UCA0TXBUF
     29          
     30          //Initializes UART control registers for transmitting data, as well as baud rate

   \                                 In  segment CODE, align 2
     31          void initializeUART(void)  
   \                     initializeUART:
     32          {
     33            
     34            P2SEL |= BIT4 + BIT5;          //Set up Rx and Tx bits
   \   000000   F2D030002E00 BIS.B   #0x30, &0x2e
     35            UCA0CTL0 = 0;                  //Set up default RS-232 protocol         
   \   000006   C2436000     MOV.B   #0x0, &0x60
     36            UCA0CTL1 |= BIT0 + UCSSEL_2;   //Disable device, set clock
   \   00000A   F2D081006100 BIS.B   #0x81, &0x61
     37            UCA0BR0 = 27;                  //1048576 Hz / 38400 = 54.5
   \   000010   F2401B006200 MOV.B   #0x1b, &0x62
     38            UCA0BR1 = 0;
   \   000016   C2436300     MOV.B   #0x0, &0x63
     39            UCA0MCTL = 0x94;
   \   00001A   F24094006400 MOV.B   #0x94, &0x64
     40            UCA0CTL1 &= ~BIT0;             //Start UART device
   \   000020   D2C36100     BIC.B   #0x1, &0x61
     41          }
   \   000024   1001         RETA
   \   000026                REQUIRE P2SEL
   \   000026                REQUIRE UCA0CTL0
   \   000026                REQUIRE UCA0CTL1
   \   000026                REQUIRE UCA0BR0
   \   000026                REQUIRE UCA0BR1
   \   000026                REQUIRE UCA0MCTL
     42          

   \                                 In  segment CODE, align 2
     43          void sendData(void)
   \                     sendData:
     44          {
   \   000000   3B15         PUSHM.W #0x4, R11
     45            //Xper = (ADCXval*3/4095*100/3);        //calculate percentage outputs
     46            //Yper = (ADCYval*3/4095*100/3);
     47            //Zper = (ADCZval*3/4095*100/3);
     48            
     49            Xper = ADCXval;
   \   000002   1C42....     MOV.W   &ADCXval, R12
   \   000006   1D42....     MOV.W   &ADCXval + 2, R13
   \   00000A   ........     CALLA   #_Cast32sto32f
   \   00000E   824C....     MOV.W   R12, &Xper
   \   000012   824D....     MOV.W   R13, &Xper + 2
     50            Yper = ADCYval;
   \   000016   1C42....     MOV.W   &ADCYval, R12
   \   00001A   1D42....     MOV.W   &ADCYval + 2, R13
   \   00001E   ........     CALLA   #_Cast32sto32f
   \   000022   824C....     MOV.W   R12, &Yper
   \   000026   824D....     MOV.W   R13, &Yper + 2
     51            Zper = ADCZval;
   \   00002A   1C42....     MOV.W   &ADCZval, R12
   \   00002E   1D42....     MOV.W   &ADCZval + 2, R13
   \   000032   ........     CALLA   #_Cast32sto32f
   \   000036   824C....     MOV.W   R12, &Zper
   \   00003A   824D....     MOV.W   R13, &Zper + 2
     52            
     53            int i;
     54            
     55            //Send packet via rs-232
     56            UART_putchar(0x55);                   //send header
   \   00003E   7C405500     MOV.B   #0x55, R12
   \   000042   ........     CALLA   #UART_putchar
     57          
     58            //Use character pointers to send one byte of float X and Y value at a time
     59            char *xpointer=(char *)&Xper;
   \   000046   3B40....     MOV.W   #Xper, R11
     60            char *ypointer=(char *)&Yper;
   \   00004A   3840....     MOV.W   #Yper, R8
     61            char *zpointer=(char *)&Zper;
   \   00004E   3940....     MOV.W   #Zper, R9
     62            
     63            //Send x percentage float one byte at a time
     64            for(i=0; i<4; i++)
   \   000052   0A43         MOV.W   #0x0, R10
   \                     ??sendData_0:
   \   000054   2A92         CMP.W   #0x4, R10
   \   000056   0734         JGE     ??sendData_3
     65            {
     66              UART_putchar(xpointer[i]);
   \   000058   0F4B         MOV.W   R11, R15
   \   00005A   0F5A         ADD.W   R10, R15
   \   00005C   6C4F         MOV.B   @R15, R12
   \   00005E   ........     CALLA   #UART_putchar
     67            }
   \   000062   1A53         ADD.W   #0x1, R10
   \   000064   F73F         JMP     ??sendData_0
     68            
     69            //Send y percentage float one byte at a time
     70            for(i=0; i<4; i++)
   \                     ??sendData_3:
   \   000066   0A43         MOV.W   #0x0, R10
   \                     ??sendData_1:
   \   000068   2A92         CMP.W   #0x4, R10
   \   00006A   0734         JGE     ??sendData_4
     71            {
     72              UART_putchar(ypointer[i]);
   \   00006C   0F48         MOV.W   R8, R15
   \   00006E   0F5A         ADD.W   R10, R15
   \   000070   6C4F         MOV.B   @R15, R12
   \   000072   ........     CALLA   #UART_putchar
     73            }
   \   000076   1A53         ADD.W   #0x1, R10
   \   000078   F73F         JMP     ??sendData_1
     74            
     75            //Send z percentage float one byte at a time
     76            for(i=0; i<4; i++)
   \                     ??sendData_4:
   \   00007A   0A43         MOV.W   #0x0, R10
   \                     ??sendData_2:
   \   00007C   2A92         CMP.W   #0x4, R10
   \   00007E   0734         JGE     ??sendData_5
     77            {
     78              UART_putchar(zpointer[i]);
   \   000080   0F49         MOV.W   R9, R15
   \   000082   0F5A         ADD.W   R10, R15
   \   000084   6C4F         MOV.B   @R15, R12
   \   000086   ........     CALLA   #UART_putchar
     79            }
   \   00008A   1A53         ADD.W   #0x1, R10
   \   00008C   F73F         JMP     ??sendData_2
     80          }
   \                     ??sendData_5:
   \   00008E   3817         POPM.W  #0x4, R11
   \   000090   1001         RETA
     81          

   \                                 In  segment CODE, align 2
     82          void main(void)
   \                     main:
     83          {
     84            WDTCTL = WDTPW + WDTHOLD;	// Stop WDT
   \   000000   B240805A2001 MOV.W   #0x5a80, &0x120
     85          
     86            initializeUART();	                // Setup UART for RS-232
   \   000006   ........     CALLA   #initializeUART
     87          
     88            P6DIR &= ~0x15;	// Configure P6.0,2,4 as input pins  
   \   00000A   F2F0EA003600 AND.B   #0xea, &0x36
     89            P6SEL |= 0x15;	// Configure P6.0,2,4 as analog pins
   \   000010   F2D015003700 BIS.B   #0x15, &0x37
     90          
     91            //Set up timer to send ADC info to PC every 100 ms
     92            TACCR0 = 1639;                //1639 / 32768 Hz = 0.05s
   \   000016   B24067067201 MOV.W   #0x667, &0x172
     93            TACTL = TASSEL_1 + MC_1;      //ACLK, up mode  
   \   00001C   B24010016001 MOV.W   #0x110, &0x160
     94            TACCTL0 = CCIE;               //enabled interupt
   \   000022   B24010006201 MOV.W   #0x10, &0x162
     95          
     96            //Set up ADC 12
     97            ADC12CTL0 = ADC12ON + SHT0_6 + MSC; // configure ADC converter
   \   000028   B2409006A001 MOV.W   #0x690, &0x1a0
     98            ADC12CTL1 = SHP + CONSEQ_1;     // Use sample timer, single sequence
   \   00002E   B2400202A201 MOV.W   #0x202, &0x1a2
     99            ADC12MCTL0 = INCH_0;            // ADC chan 0 is A0 pin
   \   000034   C2438000     MOV.B   #0x0, &0x80
    100            ADC12MCTL1 = INCH_2;            // ADC chan 1 is A2 pin
   \   000038   E2438100     MOV.B   #0x2, &0x81
    101            ADC12MCTL2 = INCH_4 + EOS;      // ADC chan 2 is A4 pin
   \   00003C   F24084008200 MOV.B   #0x84, &0x82
    102            
    103            ADC12IE |= 0x02;                           // Enable ADC12IFG.8
   \   000042   A2D3A601     BIS.W   #0x2, &0x1a6
    104            
    105            for (int i = 0; i < 0x3600; i++);         // Delay for reference start-up
   \   000046   0F43         MOV.W   #0x0, R15
   \                     ??main_0:
   \   000048   3F900036     CMP.W   #0x3600, R15
   \   00004C   0234         JGE     ??main_2
   \   00004E   1F53         ADD.W   #0x1, R15
   \   000050   FB3F         JMP     ??main_0
    106            
    107            ADC12CTL0 |= ENC;                         // Enable conversions
   \                     ??main_2:
   \   000052   A2D3A001     BIS.W   #0x2, &0x1a0
    108            
    109            _EINT();
   \   000056   32D2         EINT
   \   000058   0343         NOP
    110            
    111            //ADC12CTL0 |= ADC12SC;	// Start conversions
    112            
    113            while (1)
    114            {
    115               ADC12CTL0 |= ADC12SC;	// Start conversions
   \                     ??main_1:
   \   00005A   92D3A001     BIS.W   #0x1, &0x1a0
    116              __bis_SR_register(LPM0_bits + GIE);	    // enter LPM0
   \   00005E   32D01800     BIS.W   #0x18, SR
   \   000062   FB3F         JMP     ??main_1
   \   000064                REQUIRE WDTCTL
   \   000064                REQUIRE P6DIR
   \   000064                REQUIRE P6SEL
   \   000064                REQUIRE TACCR0
   \   000064                REQUIRE TACTL
   \   000064                REQUIRE TACCTL0
   \   000064                REQUIRE ADC12CTL0
   \   000064                REQUIRE ADC12CTL1
   \   000064                REQUIRE ADC12MCTL0
   \   000064                REQUIRE ADC12MCTL1
   \   000064                REQUIRE ADC12MCTL2
   \   000064                REQUIRE ADC12IE
    117            }
    118          
    119          }
    120          
    121          #pragma vector=ADC12_VECTOR

   \                                 In  segment ISR_CODE, align 2
    122          __interrupt void ADC12ISR(void)
   \                     ADC12ISR:
    123          {
   \   000000   1F15         PUSHM.W #0x2, R15
    124            ADCXval = ADC12MEM0;                    // Move results, IFG is cleared
   \   000002   1E424001     MOV.W   &0x140, R14
   \   000006   0F43         MOV.W   #0x0, R15
   \   000008   824E....     MOV.W   R14, &ADCXval
   \   00000C   824F....     MOV.W   R15, &ADCXval + 2
    125            ADCYval = ADC12MEM1;
   \   000010   1E424201     MOV.W   &0x142, R14
   \   000014   0F43         MOV.W   #0x0, R15
   \   000016   824E....     MOV.W   R14, &ADCYval
   \   00001A   824F....     MOV.W   R15, &ADCYval + 2
    126            ADCZval = ADC12MEM2;
   \   00001E   1E424401     MOV.W   &0x144, R14
   \   000022   0F43         MOV.W   #0x0, R15
   \   000024   824E....     MOV.W   R14, &ADCZval
   \   000028   824F....     MOV.W   R15, &ADCZval + 2
    127            __bic_SR_register_on_exit(LPM0_bits);     // Exit LPM0
   \   00002C   B1C010000400 BIC.W   #0x10, 0x4(SP)
    128          }
   \   000032   1E17         POPM.W  #0x2, R15
   \   000034   0013         RETI
   \   000036                REQUIRE ADC12MEM0
   \   000036                REQUIRE ADC12MEM1
   \   000036                REQUIRE ADC12MEM2
    129          
    130          #pragma vector = TIMERA0_VECTOR

   \                                 In  segment ISR_CODE, align 2
    131          __interrupt void timerA_isr()
   \                     timerA_isr:
    132          {
   \   000000   3F15         PUSHM.W #0x4, R15
    133            sendData();
   \   000002   ........     CALLA   #sendData
    134            __bic_SR_register_on_exit(LPM0_bits);     // Exit LPM0
   \   000006   B1C010000800 BIC.W   #0x10, 0x8(SP)
    135          }
   \   00000C   3C17         POPM.W  #0x4, R15
   \   00000E   0013         RETI

   \                                 In  segment INTVEC, offset 0x2c, root
   \                     `??timerA_isr??INTVEC 44`:
   \   00002C   ....         DC16    timerA_isr

   \                                 In  segment INTVEC, offset 0x2e, root
   \                     `??ADC12ISR??INTVEC 46`:
   \   00002E   ....         DC16    ADC12ISR
    136          
    137          
    138          
    139          
    140          
    141          
    142          
    143          
    144          
    145          
    146          
    147          
    148          
    149          
    150          
    151          
    152          
    153          
    154          
    155          
    156          
    157          
    158          
    159          
    160          
    161          
    162          
    163          
    164          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      8   ADC12ISR
      4   UART_putchar
      4   initializeUART
      4   main
        4   -> initializeUART
     12   sendData
       12   -> UART_putchar
       12   -> _Cast32sto32f
     12   timerA_isr
       12   -> sendData


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ??ADC12ISR??INTVEC 46
       2  ??timerA_isr??INTVEC 44
       2  ADC12CTL0
       2  ADC12CTL1
       2  ADC12IE
      54  ADC12ISR
       1  ADC12MCTL0
       1  ADC12MCTL1
       1  ADC12MCTL2
       2  ADC12MEM0
       2  ADC12MEM1
       2  ADC12MEM2
       4  ADCXval
       4  ADCYval
       4  ADCZval
       1  IFG2
       1  P2SEL
       1  P6DIR
       1  P6SEL
       2  TACCR0
       2  TACCTL0
       2  TACTL
      12  UART_putchar
       1  UCA0BR0
       1  UCA0BR1
       1  UCA0CTL0
       1  UCA0CTL1
       1  UCA0MCTL
       1  UCA0TXBUF
       2  WDTCTL
       4  Xper
       4  Yper
       4  Zper
      38  initializeUART
     100  main
     146  sendData
      16  timerA_isr

 
 296 bytes in segment CODE
  33 bytes in segment DATA16_AN
  24 bytes in segment DATA16_Z
   4 bytes in segment INTVEC
  70 bytes in segment ISR_CODE
 
 366 bytes of CODE  memory
   0 bytes of CONST memory (+  4 bytes shared)
  24 bytes of DATA  memory (+ 33 bytes shared)

Errors: none
Warnings: none
